public class Shuffle {

    public static void main(String[] args) {

        shuffle(new int[]{7,5,9,7,5,8,10,4,3,3,2,5,9,10}, 7);
    }



    public static int[] shuffle(int[] nums, int n) {
        shuffleNumber( nums, 0, nums.length - 1);
        for (int i = 0; i < nums.length; i += 2){
            int temp = nums[i];
            nums[i] = nums[i + 1];
            nums[i + 1] = temp;
        }
        return nums;
    }

    public static void shuffleNumber(int[] nums, int start, int end) {
        int n = end - start + 1;
        if (n <= 1){
            return;
        }
        // 处理奇数，最后一个不进行处理,直接放到最后
        if (n % 2 == 1){
            n --;
        }
        int l = 1, k = 0;
        while (l - 1  < n){
            l *= 3;
            k ++;
        }
        if (l > n && n != 2){
            k --;
            l /= 3;
        }
        int n2 = n / 2;
        l = l - 1;
        int last = (n - l) / 2, s0 = start + (n2 - last), s1 = start + n2 - 1, s2 = start + n2, s3 = end - last;
        reverse(nums, s0 ,  s1);
        reverse(nums, s2,  s3);
        reverse(nums, s0,  s3);
        // start
        // 3^k - 1, we can start with: 1 3 9
        while (k > 0){
            // 1  3  9  0 2 8
            int s = (int) Math.pow(3,(k - 1));
            replacePosition(nums, start,start + s - 1,nums[start + s - 1],start + s - 1, l);
            k --;
        }
        //rest  递归调用
        shuffleNumber(nums, start + l , end);
    }

    private static void reverse(int[] nums,int start, int end){
        int temp;
        while (start < end){
            temp = nums[start];
            nums[start ++] = nums[end];
            nums[end --] = temp;
        }
    }

    private static void replacePosition(int[] nums, int numsStart,int start,int preNum, int cur, int len){
        int temp = nums[cur], next = numsStart, index = (cur - numsStart), mid = len / 2;
        if (index >= len / 2){
            next += (index - mid) * 2;
        }else {
            next += (index) * 2 + 1;
        }
        nums[cur] = preNum;
        if (start == next){
            nums[start] = temp;
            return;
        }
        replacePosition(nums, numsStart,start, temp, next, len);
    }
}
